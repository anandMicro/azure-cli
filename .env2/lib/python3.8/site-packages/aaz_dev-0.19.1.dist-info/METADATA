Metadata-Version: 2.1
Name: aaz-dev
Version: 0.19.1
Summary: Microsoft Atomic Azure CLI Commands Developer Tools
Home-page: https://github.com/Azure/aaz-dev-tools
Author: Microsoft Corporation
Author-email: azpycli@microsoft.com
License: MIT
Keywords: azure
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.8
License-File: LICENSE
Requires-Dist: schematics (~=2.1.1)
Requires-Dist: pyyaml (~=5.4.0)
Requires-Dist: pytest (~=6.2.0)
Requires-Dist: fuzzywuzzy (~=0.18.0)
Requires-Dist: inflect (~=5.3.0)
Requires-Dist: msrestazure (~=0.6.4)
Requires-Dist: lxml (~=4.9.2)
Requires-Dist: flask (~=2.1.3)
Requires-Dist: cachelib (~=0.5.0)
Requires-Dist: xmltodict (~=0.12.0)
Requires-Dist: packaging (~=21.3)
Requires-Dist: Jinja2 (~=3.0.3)
Requires-Dist: MarkupSafe (~=2.0.1)
Requires-Dist: jsonschema (~=4.17.1)

# Microsoft Atomic Azure CLI Dev Tools

The *aaz-dev* tool is designed to generate atomic Azure CLI commands from OpenAPI specifications. For more information, please refer to [Doc](./src/aaz_dev/docs/Docs#introduction-to-aazdev) or [Video](https://msit.microsoftstream.com/video/d8c50840-98dc-a27a-806a-f1ed2daa33a9)

## Installation
Currently, we can install it with a [.whl file](https://github.com/Azure/aaz-dev-tools/releases). Later on, we'll publish it to PyPI to support *pip install* way of installation.

## Setting up your development environment

### 1 Code repos

Please `Fork` the following repos in your github account and `Clone` them in your local disk:
   
   - [Azure CLI](https://github.com/Azure/azure-cli)
   - [Azure CLI Extension](https://github.com/Azure/azure-cli-extensions)
   - [AAZ](https://github.com/Azure/aaz): Used to upload the command model generated.
   - [azure-rest-api-specs](https://github.com/Azure/azure-rest-api-specs) or [azure-rest-api-specs-pr](https://github.com/Azure/azure-rest-api-specs-pr)

After clone you can add `upstream` for every repos in your local clone by using `git remote add upstream`.

### 2 Setup python

#### 2.1 Install python
Please install python with version >= 3.8 in your local machine.

- For windows: You can download and run full installer from [Python Download](https://www.python.org/downloads/).
- For linux: You can install python from Package Manager or build a stable relase from source code

Check the version of python, make use it's not less than 3.8.
- For windows:
    You can run:
    ```PowerShell
    C:\Users\{xxxx}\AppData\Local\Programs\Python\Python3{xxxx}\python --version
    ```
    `C:\Users\{xxxx}\AppData\Local\Programs\Python\Python3{xxxx}` is the python installation path.
- For linux:
    ```bash
    python --version
    ```
    You can also specify the version number when you have multiple versions installed. For example if you want to run version 3.8
    ```bash
    python3.8 --version
    ```

#### 2.2 Setup a python virtual environment

You can use venv to create virtual environments, optionally isolated from system site directories. Each virtual environment has its own Python binary (which matches the version of the binary that was used to create this environment) and can have its own independent set of installed Python packages in its site directories.

You can run the following command to create a new virtual environment:
- For windows:
    ```PowerShell
    C:\Users\{xxxx}\AppData\Local\Programs\Python\Python3{xxxx}\python -m venv {some path}\{venv name}
    ```
- For linux:
    ```bash
    python3.8 -m venv {some path}/{venv name}
    ```

### 3 Active existing virtual environment

You should __always__ active the virtual environment for azure-cli development.

- For Windows:
    - Powershell
    ```powershell
    {some path}\{venv name}\Scripts\Activate.ps1
    ```
    - Command Prompt
    ```Command Prompt
    {some path}\{venv name}\Scripts\activate.bat
    ```
- For Linux:
```bash
source {some path}/{venv name}/bin/activate
```
After active the virtual environment, the `python` command will always be the one creates this virtual environment and you can always use `python`
```
python --version
```

### 4 Install tools for azure-cli development

#### 4.1 Install [azure-cli-dev-tools](https://github.com/Azure/azure-cli-dev-tools)
Both for windows and linux
```
pip install azdev
```

#### 4.2 Install aaz-dev-tools

- For Windows
    - Powershell
    ```
    pip install $(Invoke-WebRequest https://api.github.com/repos/Azure/aaz-dev-tools/releases/latest -UseBasicParsing | % { $_.Content } | ConvertFrom-Json | % { $_.assets.browser_download_url } | Select-String -Pattern "https.*.whl" -AllMatches | % { $_.Matches } | % { $_.Value })
    ```
    - Command Prompt
    ```
    curl https://api.github.com/repos/Azure/aaz-dev-tools/releases/latest -s | findstr https.*.whl
    pip install {the url find in above command}
    ```
- For linux
    ```bash
    pip install $(curl https://api.github.com/repos/Azure/aaz-dev-tools/releases/latest -s | grep -o "https.*.whl")
    ```
#### 4.3 Set up build env
- For linux users, set up python3 build tools would avoid other unseen installation issues
  ```
  Ubuntu: apt-get install python3-dev build-essential
  Centos: yum install python3-devel
  ```
#### 4.4 Possible problems
- For windows users, dependency python-levenshtein installation might run into trouble. developers might need to download [.whl](https://www.lfd.uci.edu/~gohlke/pythonlibs/#python-levenshtein) file and install it manually (reference to [link](https://stackoverflow.com/questions/37676623/cant-install-levenshtein-distance-package-on-windows-python-3-5/46414982))

### 5. Code repos setup

#### 5.1 azure-cli
Before start to the development task, you should always sync the code in the `dev` branch of `upstream`(Azure/Azure-cli).
If your commands will generated to azure-cli repo, you should checkout a new branch with `feature-` prefix.

#### 5.2 azure-cli-extensions
If your commands will generated to azure-cli-extension repo, you should sync the code in the `main` branch of `upstream`(Azure/Azure-cli-extensions), and checkout a new branch with `feature-` prefix.

#### 5.3 aaz
Before start to the development task, you should always sync the change in the `main` branch of `upstream`, and checkout a new branch with `feature-` prefix.

#### 5.4 run `azdev setup`
You should always run the following command everytime you sync `azure-cli` code of `upstream`.
```
azdev setup --cli {path to azure-cli} --repo {path to azure-cli-extensions}
```

### 6 Run aaz-dev-tools

```bash
aaz-dev run -c {path to azure-cli} -e {path to azure-cli-extensions} -s {path swagger or swagger-pr} -a {path to aaz}
```

## Before using generated commands

1. Make sure you have logined by `az login`.
2. Make sure you have switched to the subscription for test by `az account set -s {subscription ID for test}`
3. If your commands are in extensions, make sure you have loaded this extension by `azdev extension add {your extension name}`

## Other documentations

- [extension](https://github.com/Azure/azure-cli/blob/dev/doc/extensions/README.md)
- [command guidelines](https://github.com/Azure/azure-cli/blob/dev/doc/command_guidelines.md)
- [authoring tests](https://github.com/Azure/azure-cli/blob/dev/doc/authoring_tests.md)
- [shorthand syntax](https://github.com/Azure/azure-cli/blob/dev/doc/shorthand_syntax.md): Azure cli shorthand syntax can help cli users to pass complicated argument values. Only the arguments of AAZ(Atomic Azure CLI) commands generated by aaz-dev tool support shorthand syntax.

## Submit code and command models

After finish the development, you should push the change in your forked repos first, and the create a Pull Request to upstream repos.

- azure-cli: create a Pull Request to `dev` branch of `Azure/azure-cli`
- azure-cli-extensions: create a Pull Request to `main` branch of `Azure/azure-cli-extensions` 
- aaz: create a Pull Request to `main` branch of `Azure/azz`


## Reporting issues and feedback
If you encounter any bugs with the tool please file an issue in the [Issues](https://github.com/Azure/aaz-dev-tools/issues) section of our GitHub repository.

## License
```
MIT License

Copyright (c) Microsoft Corporation. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
```


.. :changelog:

Release History
===============

0.19.1
++++++
* Add pre_instance_create, post_instance_create, pre_instance_delete, post_instance_delete callbacks (#191)
* When generating subresource commands, set default identifier to 'name' if the element of array<object> contains 'id' and 'name' properties (#192)
* Fix array argument element class type display issue (#193)
* Compact json file in aaz output (#194)
* Support 'uri' format in swagger, support 'x-cadl-generated' property in swagger (#195)

0.19.0
++++++
* Feature support subcommand modification inheritance (#184)
* Fix _iter_schema_in_json when js has not schema (#185)
* Update requirements to support Python 3.11 (#186)
* Inherent subresource commands in aaz when export workspace (#187)
* Support partial commands generation in a module (#189)

0.18.0
++++++
* Relink command after class unwrapped (#182)
* Support unwrap class modification inherit (#181)
* Change portal namespace (#179)

0.17.0
++++++
* Workspace swagger picker supports load default swagger module and resource providers (#175)
* `aaz-dev run`: Add `--swagger-module-path`, "--module", "--resource-provider" to specify single swagger repo for code generation (#175)
* `aaz-dev command-model generate-from-swagger`: Support generate command model from swagger by readme tag for pipeline use (#176)
* `aaz-dev cli generate-by-swagger-tag`: Support generate code in cli from command models by using readme tag for pipeline use (#178)
* `aaz-dev regenerate`: Support to regenerate aaz commands from command models (#178)
* Fix Workspace display no arguments command error (#177)
* Ignore '/' character in x-ms-identifiers swagger property (#174)

0.16.2
++++++
* Fix subresource selector in generic update operation (#172)

0.16.1
++++++
* Ignore argument id-parts when generate code for list commands (#169)
* Optimize swagger `Error response` invalid hints (#170)

0.16.0
++++++
* Support build-in keywords in property name generation (#167)
* Add portal CLI generator (#153)
* Support to generate property name starts with digit (#166)
* Support to modify default for array, dict and object arguments (#165)
* Fix `id_part` setup (#164)
* Disable `id_part` for create command and subcommand (#163)
* Support array index auto generate (#162)
* Support to modify argument options for subcommand (#161)
* Support subcommand generation (#154)
* Add FAQs for Swagger definition (#160)
* Fix `x-ms-skip-url-encoding` unparsed in Swagger (#159)

0.15.1
++++++
* Fix `workspace` bug on class argument unwrap (#155)
* Fix `workspace` reload issue for update command using patch (#156)
* Optimize `generation` error message display when loading modules (#157)

0.15.0
++++++
* Fix workspace export to aaz issue. (#148)
* Ignore empty confirmation string in generated code (#149)
* Fix version and readiness parse issue in swagger file path (#150)
* Fix class inheritance overwritten issue (#151)

0.14.0
++++++
* Support class type arguments `unwrap` and `flatten` (#145)
* Support resource url filter in swagger picker (#146)

0.13.0
++++++
* Support free from dict for `"additionalProperties":True` swagger definition (#138)
* Support command confirmation prompt modification (#141)
* Fix duplicated option names detect when flatten argument (#142)
* Fix reload swagger aug group name overwrite (#143)

0.12.0
++++++
* Disable Read only inherent in swagger translators (#139)
* Enable register_callback decorator (#129)

0.11.2
++++++
* Fix cls argument base inherent (#136)
* Fix reload swagger error if no arg change previously (#135)
* Add delete confirmation for workspace delete (#134)

0.11.1
++++++
* Fix patch only not work in workspace editors (#132)
* Fix UI bugs in CLI generators (#132)
* Fix swagger frozen issue in additional properties (#130)

0.11.0
++++++
* Support export unregistered command code (#126)
* Refactor CLI Generators (#126)
* Support lifecycle callbacks in generated AAZCommand code (#127)

0.10.3
++++++
* Support workspace rename and delete (#123)
* Fix resource folder name 255 length limitation (#124)

0.10.2
++++++
* Add cmd unit test docs (#119)
* Limit empty object for create mutability only (#120)
* Fix argument content refresh issue in worksapce editor (#121)

0.10.1
++++++
* Support to parse swagger resource providers without `microsoft` keywords (#116)
* Support swagger modification reload in workspace (#117)

0.10.0
++++++
* Fix command schema duplicated diff calculation issue (#112)
* Support workspace modification inheritance (#113)
* Disable flatten for argument when the schema has cls definition (#114)
* Optimize command description when generated from swagger (#114)
* Support examples inherit (#114)

0.9.6
+++++
* Support modify argument default value and reverse bool argument expression (#106)
* Add default and blank value validation for argbase and arg(#106)
* Add reformat to verify command model(#106)
* Support default value modification ui(#106)
* Ignore argument default for update actions (#107)
* Add argument to specify workspace path (#108)
* Fix bug to print string with newline (#110)

0.9.5
+++++
* Limit minimal python version to 3.8 (#98)(#99)(#101)
* Fix issue when rename commands in cfg_editor (#100)
* Remove python-Levenshtein reliance (#102)
* Disable paging for long running commands (#103)
* Add provisioning state field verification in wait command generation (#104)

0.9.4
+++++
* Update docs (#94)(#95)(#96)

0.9.3
+++++
* Support `DurationArg`, `DateArg`, `DateTimeArg` and `UuidArg` generation (#90)

0.9.2
+++++
* Support empty object argument (#89)
* Add `CMDIdentityObjectSchemaBas` and `CMDIdentityObjectSchema` schema (#89)
* Support use null to unset object or array type elements in dict or array (#89)

0.9.1
+++++
* Fix wait command generation while get operation contains query or header parameters (#88)

0.9.0
+++++
* Support wait command generation (#86)

0.8.0
+++++
* Support argument validation (#85)

0.7.1
+++++
* Fix parse swagger file path version

0.7.0
+++++
* Improve message display in swagger picker (#83)
* Update MIN_CLI_CORE_VERSION to 2.38.0 (#83)

0.6.2
+++++
* Fix issue in _cmd.py.j2 (#80)
* Fix nullable issue for discriminators (#81)
* Fix frozen issue for additional_props (#81)

0.6.1
+++++
* Disable `singular options` generation for list argument by default (#79)

0.6.0
+++++
* Support singular options for list argument (#78)
* Fix argument long summary generation (#78)

0.5.1
+++++
* Fix command name generation with url endwith slash (#75)
* Enable more arg types in command generation (#76)
* Fix left over `set_discriminator` in _cmd.py.j2 template (#77)
* Support `nullable` for elements of list and dict args in `update` commands (#77)

0.5.0
+++++
* Support argument hidden in Workspace Editor.
* Fix body parameter required issue.
* Support to pass a required empty object property.

0.4.0
+++++
* [Breaking Change] Replace *.xml by *.json file in `/Resources` folder of `aaz` repo, keep `*.xml` only for model review.

0.3.0
+++++
* Support similar arguments modification
* Fix swagger parse issue: Support `allOf{$ref}` format reference for polymorphic definition.

0.2.2
+++++
* Support confirmation prompt for delete command;
* Fix ext metadata update;

0.2.1
+++++
* Suppress the style issues for generated code;

0.2.0
+++++
* Support argument flatten in Workspace Editor;
* Optimize error message display;

0.1.2
+++++
* Support `--quiet` argument in aaz-dev run to disable web browser page opening;
* Raise error when port is used by others;

0.1.1
+++++
* Use Jinja version 3.0.3;
* Change minimal required cli-core version to 2.37.0;

0.1.0
+++++
* Initial release;
